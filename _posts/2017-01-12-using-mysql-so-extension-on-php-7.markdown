---
layout: post
title: 낡은 PHP 환경에서 쓸 만한 프레임워크 / 그리고 PHP 7에서 mysql.so 확장 사용하기
author: 박연오(bakyeono@gmail.com)
date: 2017-01-12 23:58 +0900
tags: php mysql codeigniter laravel
---
* table of contents
{:toc}


## 푸념

오랜만에 블로그를 쓴다.

회사의 주력 프로젝트에 집중하느라 너무 바빠서 글을 쓰지 못했다. 스트레스가 크면 집에서 쉴 때도 뭔가 생산적인 활동을 하기는 어렵다. 나중에 해야지하고 쌓아둔 개인 프로젝트와 쓰려고 제목만 써 둔 글이 산더미다.

그런 압박 속에서도 키보드를 붙들게 만드는 일이 있다.

이번 주에는 급하게 진행할 외주 작업이 생겼다. 사용자들이 상품평을 남기는 간단한 웹 사이트를 만드는 것인데 오픈 예정일이 코앞이라 순식간에 만들어주어야 했다.

급한만큼 익숙하고 빠르게 개발할 수 있는 장고(Django)로 개발하려 했다. 데이터 구조도 간단하고 기능도 적고 주로 관리자용 페이지로 구성된 시스템이라 요구사항만 보면 좋은 프로젝트였다. 장고로 개발하면 5일도 안 걸릴 작업 같았다.

그런데 클라이언트 측이 PHP만 다룰 수 있으니 PHP로 개발해 달라는 것이 아닌가. 두려움이 느껴졌다. 내가 PHP를 잘 못 쓰기 때문이기도 하지만 PHP로 작업된 프로그램 중에는 코드가 너무 낡아서 유지보수하기가 힘든 경우가 많기 때문이다.

그래도 새로운 사이트를 개발하는 것이고 모던 PHP라는 패러다임도 있는 만큼 새 출발을 올바르게 한다면 낡은 코드는 문제가 되지 않을 것 같았다. 특히 현대적인 기능을 갖춘 라라벨(Laravel)을 이용하면 좋을 것 같아 라라벨로 개발하기로 합의했다. 다만 클라이언트가 웹 사이트를 배포할 서버 정보는 그 미팅에서 주지 않았고 다음에 알려준다고 했는데...

라라벨은 몇 번 구경만 해 봤고 제대로 배우거나 써 본 적이 없었기 때문에 작업할 준비를 위해 바로 자료를 찾아보았다. 고맙게도 라라벨 공식 문서가 한국어로 번역돼 있었다. 하지만 공식 문서는 입문자에게는 설명이 좀 친절하지 않은 편이었고 너무 딱딱하게 번역된 면도 있었다. 입문용으로는 구 버전 기준으로 작성된 영문 튜토리얼 문서가 더 쉽고 도움이 됐다.(구글 검색하면 상단에 나온다.) 그걸 먼저 보고 한국어 매뉴얼을 보니 이해하기 좋았다.

라라벨은 마이그레이션 문법, 엘로퀀트 ORM, 페이커(faker)를 이용한 더미 데이터 생성(seeding) 기능, 깔끔한 템플릿 엔진 등을 갖추고 있었다. 기능이 풍부할 뿐 아니라 매우 깔끔하게 정돈되어 있어서 이전에 보던 PHP 코드 느낌이 안 들고 보면 볼수록 정이 갔다. 이 정도라면 PHP도 개발할 맛이 나겠다는 생각이 들었다. 나는 기분 좋게 데이터 모델을 설계했다. 몇 시간만에 모델/마이그레이션/더미 데이터 생성기를 만들 수 있었다. 이 정도면 장고와 비교해도 손색이 없고 더 아름답게 느껴지기도 했다.

하지만 오늘 클라이언트로부터 서버 접속 정보를 받고는 눈 앞이 아득해 졌다. 일단 서버에는 FTP와 phpMyAdmin으로만 접속이 가능했다. SSH 접속 권한도 달라고 요청했으나 서버 관리자가 SSH가 무엇인지조차 모른다며 내 요청 자체를 이해하지 못했다. 서버 관리자는 회의가 있다며 계속 통화를 피하더니 한참 뒤에야 SSH 접속은 보안상 허가해줄 수가 없다고 한다. 매우 당황스러웠다.

FTP로 서버에 접속해 보니 PHP로 만들어진 다른 웹사이트가 이미 구동중이었다. 그 위에 PHP 프로그램을 짜 넣어서 새 웹사이트를 만들어야 하는 환경이었다. 구동중인 웹사이트는 매우 낡고 지저분하게 코딩되어 있었으며 불필요한 파일들("삭제할 폴더1" 같은)이 여기저기 섞여 있는 등 악취가 심했다. PHP 설치 정보를 확인해보니 릴리즈된 지 6년이 지난 5.2.17 버전이 설치돼 있었다.

DB도 이상하게 설계돼 있었고 MySQL 기본 인코딩 설정이 스웨덴어(왜?) 문자셋으로 되어 있었다. 하나의 DB 안에서 테이블마다 문자셋이 뒤죽박죽 달랐다.

SSH 접속이 불가하고 관리자 권한도 없으니 아파치 웹 서버 설정을 건드리는 것조차 할 수 없었다. phpMyAdmin으로 접속하라고 준 MySQL 계정에는 데이터베이스 생성 권한도 없었다. 그나마 테이블 생성 권한이 있으니 이걸로 하면 되긴 하지만.

도무지 이런 환경에서 작업할 엄두가 나지 않아서 새 서버를 요청했다. 하지만 월 5,500원의 가상서버호스팅 비용이 아깝다는 것과 기존 웹사이트의 DB와 추후 통합할 것을 염두에 두고 있다는 이유로 거절됐다. 잠깐만, 기존의 낣은 웹사이트를 앞으로도 계속 확장하며 사용하겠다고? 나는 그 웹사이트는 만든지 10년은 더 된 것 같은데 이제 그만 포기하시라고 말했다. 놀랍게도 만든지 3년도 안 된 거라고 한다. 이럴 수가?


## 낡은 PHP 환경에서 쓸 만한 프레임워크

이 환경에서는 라라벨을 사용할 수 없었다.

프레임워크 없이 A-to-Z PHP 개발을 해야할 것 같았다. 예전에 그렇게 작업한 경험도 있지만 생각할수록 이건 잘못된 일이라는 생각이 들었다. MySQL 쿼리 함수를 직접 만들 수는 있지만 이게 기간 내에 할 수 있는 일인가? 일일이 CRUD 코드를 짜는 건 얼마나 시간낭비인가? SQL 인젝션 방지 같은 보안 이슈를 언제 다 처리하지? 내가 생각못한 이슈는 없을까?

궁한 상황에서 머리를 굴려 보니 시간이 없다 하더라도 라라벨 말고 다른 라이브러리라도 빠르게 배워서 쓰는 게, 차라리 더 빠르고 코드 품질도 더 좋지 않을까하는 생각이 들었다. 좀 구식이라고 듣긴 했지만 라라벨 못지 않게 유명하고 한국에서 많이 쓰는 코드이그니터(CodeIgniter)를 찾아보았다. PHP 필요 버전 5.3.7, 권장 버전 5.6이다. 헐 이 서버에서는 이것도 못 돌린다. 그 다음으로 케익PHP(CakePHP)를 찾아보았다. PHP 필요 버전 5.5.9다. 이것도 안 된다.

아. 결국 직접 바퀴를 발명해야 하는 것인가. 한없이 어두운 내 표정을 보고 동료가 말을 걸었다. "코드이그니터 옛날 버전이라도 쓰면 어때요?" 흠, 그렇군. 코드이그니터 버전 2를 살펴보았다. 일단 PHP 필요 버전은 5.1.6. 사용 가능하다. 순간 너무 기뻐서 만세를 불렀다.

하지만 이것만으로 되는 것은 아니다. 서버의 아파치 웹 서버 설정(내가 바꿀 수 없다)과 맞는지, MySQL 서버와 맞는지, 쓸만한 놈인지 등도 알아봐야 했다. 2시간 정도 이것저것 알아보고 튜토리얼을 해 보고 간단한 기능을 작성해 보니 이 서버에서도 (일단은) 실행이 되고 쓸 만하다는 걸 알게 됐다. 많은 기능은 없지만 간단하고 빠른 개발이 가능한 것 같다. 물론 좀 더 써보고 살펴봐야 알겠지만.


### 프레임워크별 비교

프레임워크 | 요구 PHP 최소 버전
---- | ----
라라벨 4.2 | 5.4
라라벨 5.3 | 5.6.4
케익PHP 3.3 | 5.5.9
코드이그니터 2 | 5.1.6
코드이그니터 3 | 5.3.7


## 그리고 PHP 7에서 mysql.so 확장 사용하기

이 서버와 호환 되는 로컬 개발 환경을 갖추는 것도 만만한 일이 아니었다. 아파치 웹 서버를 설치해서 작업용 컴퓨터의 리소스를 낭비해야 하기 때문만은 아니었다. 진짜 문제는 내 작업용 컴퓨터에는 PHP 7이 설치돼 있는데 PHP 7에서는 mysql.so 확장이 삭제됐다는 점이었다. (PHP 7에서는 mysql.so 대신 mysqli.so가 지원된다. 그 전까지는 mysqli.so와 mysql.so가 같이 지원이 됐고, mysql.so를 쓰면 보안 경고가 발생했다.) 코드이그니터 2는 mysql.so 확장을 쓰기 때문에 PHP 7 버전에서는 실행이 안 된다!

만일 로컬 환경을 갖추지 못하면 FTP로 번번히 서버에 PHP 프로그램을 전송한 후 테스트를 해야 하는 판이었다. 게다가 SSH 가 안 돼서 아파치 웹 서버 로그도 볼 수 없다!

로컬 환경과 배포 환경을 비슷하게 맞추는 건 매우 중요한 일이기 때문에, 리눅스를 다 지우고 옛날 우분투 배포판이라도 깔아서 작업을 할까하는 생각을 잠깐 했다. 아니면 번거롭더라도 버추얼박스를 써야 하는 것일까? 한참 고민을 하고 있는데, 이번에도 지혜로운 직장 동료가 "그냥 mysql.so를 다운로드해서 쓰면 안 돼요?"라는 것이다. "PHP 7 환경에 맞게 컴파일 된 녀석을 구할 수 있을까요...?" 라고 답하는 도중에 응? 그냥 컴파일을 직접 하면 되잖아? 하는 생각이 스쳤다. 그래서 찾아보니 과연 방법을 찾을 수 있었다.

이 방법은 <https://ckon.wordpress.com/2015/08/06/put-mysql-functions-back-into-php-7/> 에 설명된 방법이다.

먼저 https://github.com/php/pecl-database-mysql 소스코드를 클론한다.

    git clone https://github.com/php/pecl-database-mysql mysql --recursive

아래 명령을 차례로 입력해 컴파일을 하고

    cd mysql
    phpize
    ./configure
    make

관리자 권한으로 설치를 한다.

    sudo make install

그러면 라이브러리가 설치된 경로가 터미널에 출력된다. 내가 사용중인 만자로 리눅스의 경우에는 사용자 디렉토리 아래(`$HOME/mysql/mysql.so`)에 설치되던데, 리눅스 환경마다 설치되는 곳이 다른 듯하다.

라이브러리 파일이 위치한 경로를 확인한 후, php.ini 파일을 수정한다. 만자로 리눅스에서는 `/etc/php/php.ini` 파일이다.

    sudo vi /etc/php/php.ini

extension 들이 있는 곳 중간에 `extension=/home/bakyeono/mysql/mysql.so` 와 같이 로드할 확장 라이브러리 파일 경로를 적어주면 된다.

    /etc/php/php.ini
    ================

    ...
    extension=/home/bakyeono/mysql/mysql.so
    ...

이렇게 하고 httpd(또는 apache2)를 재시작해주면 PHP 7에서도 코드이그니터 2가 잘 실행되었다.

    sudo systemctl restart httpd.service



## 낡은 PHP 코드는 세월호 같은 것이다

아직 끝난 건 아니지만 큰 위기는 넘긴 것 같다. 앞으로도 위험성은 있겠지만 작업 자체가 불가한 상황은 넘겼으니까. 이번 작업을 하면서 간단한 작업처럼 보였던 게 손을 대는 곳마다 무섭게 무너져내리는 걸 보면서 얼마나 가슴 졸였는지 모르겠다. 다음에는 이런 작업은 미리 눈치 채고 피하고 싶다. 그게 내 뜻대로 되는 건 아니지만 말이다.

어떻게 3년도 안 됐다는 웹 사이트가 이렇게 낡았을 수 있을까? 서버 업데이트는 안 한지 몇 년도 넘은 것 같다. 설치 후 한 번도 안 한 것이 아닐까 의심스럽다. 서버를 자체 운영중이라고 말하지만 그럴리 없다. 서버 한 대로 수십 개의 사이트를 운영하는 업자의 눈속임에 속은 것이 아닐까 의심이 된다. 실제로 그런 서버를 몇 번 본 적이 있다. 아마 이번 클라이언트의 서버 관리자도 그래서 SSH 접속을 못 하게 하는 것 같다. 그게 뭔지 모르겠다는 낯 뜨거운 거짓말까지 하면서 말이다.

하지만 안전에 비용을 지출하지 않는 한국 사회에서는 그게 먹힌다. 싸다는 이유만으로. 오늘도 수많은 웹사이트들이 그럴 듯한 도장만 갖춘 채로 내부는 부식되고 반쯤 가라앉은 채 힘겹게 순항중이다.


