<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>박연오</title>
    <description>Workers of the world, unite!</description>
    <link>http://bakyeono.net/</link>
    <atom:link href="http://bakyeono.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 05 May 2015 02:33:37 +0900</pubDate>
    <lastBuildDate>Tue, 05 May 2015 02:33:37 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>프로세스를 이름으로 단번에 종료하기</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;간단 설명&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#killall&quot; id=&quot;markdown-toc-killall&quot;&gt;프로세스명이 일치하는 경우 (killall)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pkill--f&quot; id=&quot;markdown-toc-pkill--f&quot;&gt;프로세스 매개변수를 참고해야 하는 경우 (pkill -f)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;너저분한 설명&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#kill&quot; id=&quot;markdown-toc-kill&quot;&gt;kill&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ps-pidof&quot; id=&quot;markdown-toc-ps-pidof&quot;&gt;ps, pidof&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ps--ef--grep&quot; id=&quot;markdown-toc-ps--ef--grep&quot;&gt;ps -ef | grep&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pgrep&quot; id=&quot;markdown-toc-pgrep&quot;&gt;pgrep&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pkill-killall&quot; id=&quot;markdown-toc-pkill-killall&quot;&gt;pkill, killall&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오… 맙소사… 그동안의 내 타이핑은 다 뭐였단 말인가???? 아 인생이여!!&lt;/p&gt;

&lt;p&gt;그동안 매번 &lt;code&gt;ps -ef | grep PROCESS&lt;/code&gt;로 PID를 찾은 다음 &lt;code&gt;kill&lt;/code&gt; 했는데, 더 간단하게 프로세스를 끄는 방법을 알았다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;간단 설명&lt;/h2&gt;

&lt;h3 id=&quot;killall&quot;&gt;프로세스명이 일치하는 경우 (killall)&lt;/h3&gt;

&lt;p&gt;터미널에 아래와 같이 입력한다. 당연히 PROCESS_NAME은 프로세스명으로 대체해서 입력해야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ killall -9 PROCESS_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 하면 종료된다.&lt;/p&gt;

&lt;h3 id=&quot;pkill--f&quot;&gt;프로세스 매개변수를 참고해야 하는 경우 (pkill -f)&lt;/h3&gt;

&lt;p&gt;예를 들어 &lt;code&gt;java -jar my_process.jar&lt;/code&gt; 처럼 프로세스명만으로는 원하는 프로그램을 참조할 수 없는 경우가 있다. 이 떄는 &lt;code&gt;pkill&lt;/code&gt; 명령에 &lt;code&gt;-f&lt;/code&gt; 옵션을 줘서 명령행 전체를 참조해 &lt;code&gt;my_process&lt;/code&gt;를 찾아야 한다. 아래와 같이 입력하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pkill -9 -ef my_process
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;여기서 &lt;code&gt;-9&lt;/code&gt;는 KILL 신호를 보내라는 뜻이며, &lt;code&gt;-e&lt;/code&gt;는 로그 출력 옵션이다. &lt;code&gt;-f&lt;/code&gt; 옵션은 명령행 전체 참조 옵션이다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-9&lt;/code&gt; 옵션을 다른 옵션과 따로 지정해야 하는 점에 주의.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://askubuntu.com/questions/27501/whats-the-difference-between-killall-and-pkill&quot;&gt;askubuntu.com에 올라온 설명&lt;/a&gt;에 따르면 &lt;code&gt;pkill&lt;/code&gt;은 프로세스명을 좀 더 느슨한 패턴으로 찾기 떄문에 일반적인 상황에서는 &lt;code&gt;pkill&lt;/code&gt;보다 &lt;code&gt;killall&lt;/code&gt;을 쓰는 습관을 들이는 편이 더 안전하다고 한다. 물론 둘다 쓰기에 따라 위험할 수 있으니 옵션을 잘 보고 사용해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;너저분한 설명&lt;/h2&gt;

&lt;h3 id=&quot;kill&quot;&gt;kill&lt;/h3&gt;

&lt;p&gt;프로세스를 끄는 명령은 &lt;code&gt;kill -9 PID&lt;/code&gt;다.&lt;sup id=&quot;fnref:kill&quot;&gt;&lt;a href=&quot;#fn:kill&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;kill&lt;/code&gt;의 단점은 프로세스 ID(PID)로만 종료할 프로세스를 지정할 수 있다는 점이다.&lt;/p&gt;

&lt;h3 id=&quot;ps-pidof&quot;&gt;ps, pidof&lt;/h3&gt;

&lt;p&gt;PID는 &lt;code&gt;ps&lt;/code&gt; 명령으로 프로세스 목록을 출력해 찾을 수 있다. 만일 프로세스 목록이 길면 눈으로 직접 찾기가 힘들다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pidof PROCESS_NAME&lt;/code&gt; 명령을 이용하면 PID를 바로 알아낼 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pidof ruby
13701
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ps--ef--grep&quot;&gt;ps -ef | grep&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ps&lt;/code&gt;에 옵션을 지정해 자세히 출력하도록 하고 결과를 &lt;code&gt;grep&lt;/code&gt; 하면 다른 세션에서 실행되고 있는 프로세스도 찾을 수 있고, 명령행 전체를 옵션으로 참고할 수도 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ps -ef | grep jekyll
bakyeono 13701     1  0 00:41 pts/0    00:00:00 ruby /home/bakyeono/.rvm/gems/ruby-2.2.0/bin/jekyll serve --watch --force_polling --detach
bakyeono 13838  9975  0 01:07 pts/0    00:00:00 grep --color=auto jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;pgrep&quot;&gt;pgrep&lt;/h3&gt;

&lt;p&gt;하지만 &lt;code&gt;ps | grep&lt;/code&gt; 대신 둘을 합쳐놓은 &lt;code&gt;pgrep&lt;/code&gt;을 이용하는게 더 편하다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pgrep -f jekyll
13701
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;pkill-killall&quot;&gt;pkill, killall&lt;/h3&gt;

&lt;p&gt;위의 방법은 모두 PID를 일단 찾은 뒤에 &lt;code&gt;kill&lt;/code&gt;에 전달하는 과정을 거쳐야 한다. 하지만 &lt;code&gt;pkill&lt;/code&gt;을 이용하면 한방에 정리할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pkill -9 -ef PROCESS_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;문서 앞부분의 간단 설명에서 말한 것처럼, 프로세스 매개변수를 참조하지 않아도 된다면 &lt;code&gt;killall&lt;/code&gt;을 사용해도 된다.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:kill&quot;&gt;
      &lt;p&gt;엄밀히 말하면 &lt;code&gt;kill&lt;/code&gt;은 프로세스 종료 명령이 아니라 프로세스에 신호를 보내는 명령이다. 단, 9번 신호(KILL)의 경우에는 신호를 보내지 않고 커널이 바로 프로세스를 정리해 버린다. 고집불통이 된 프로세스를 처리하는 데 필요한 신호가 바로 9번이다. &lt;a href=&quot;#fnref:kill&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <author>박연오(bakyeono@gmail.com)</author>
        <pubDate>Tue, 05 May 2015 00:43:00 +0900</pubDate>
        <link>http://bakyeono.net/post/2015-05-05-linux-kill-process-by-name.html</link>
        <guid isPermaLink="true">http://bakyeono.net/post/2015-05-05-linux-kill-process-by-name.html</guid>
        
        <category>리눅스</category>
        
        <category>bash</category>
        
        <category>grep</category>
        
        
      </item>
    
  </channel>
</rss>
